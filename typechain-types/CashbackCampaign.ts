/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface CashbackCampaignInterface extends utils.Interface {
  functions: {
    "end()": FunctionFragment;
    "endTime()": FunctionFragment;
    "ended()": FunctionFragment;
    "fundCampaign(uint256)": FunctionFragment;
    "getTokenBalance()": FunctionFragment;
    "incrementRewardBalance(address,uint256)": FunctionFragment;
    "isRunning()": FunctionFragment;
    "owner()": FunctionFragment;
    "registry()": FunctionFragment;
    "rewards(address)": FunctionFragment;
    "start()": FunctionFragment;
    "startTime()": FunctionFragment;
    "started()": FunctionFragment;
    "token()": FunctionFragment;
    "voucherCollection()": FunctionFragment;
    "withdrawReward()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "end"
      | "endTime"
      | "ended"
      | "fundCampaign"
      | "getTokenBalance"
      | "incrementRewardBalance"
      | "isRunning"
      | "owner"
      | "registry"
      | "rewards"
      | "start"
      | "startTime"
      | "started"
      | "token"
      | "voucherCollection"
      | "withdrawReward"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "end", values?: undefined): string;
  encodeFunctionData(functionFragment: "endTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "ended", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fundCampaign",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incrementRewardBalance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "isRunning", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "start", values?: undefined): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "started", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "voucherCollection",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawReward",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "end", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ended", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementRewardBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isRunning", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "started", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voucherCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawReward",
    data: BytesLike
  ): Result;

  events: {
    "CampaignCreated(address,address)": EventFragment;
    "CampaignEnded(uint256)": EventFragment;
    "CampaignFunded(uint256)": EventFragment;
    "RewardSent(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CampaignCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CampaignEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CampaignFunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardSent"): EventFragment;
}

export interface CampaignCreatedEventObject {
  custodian: string;
  campaign: string;
}
export type CampaignCreatedEvent = TypedEvent<
  [string, string],
  CampaignCreatedEventObject
>;

export type CampaignCreatedEventFilter = TypedEventFilter<CampaignCreatedEvent>;

export interface CampaignEndedEventObject {
  withdrawnTokens: BigNumber;
}
export type CampaignEndedEvent = TypedEvent<
  [BigNumber],
  CampaignEndedEventObject
>;

export type CampaignEndedEventFilter = TypedEventFilter<CampaignEndedEvent>;

export interface CampaignFundedEventObject {
  depositedTokens: BigNumber;
}
export type CampaignFundedEvent = TypedEvent<
  [BigNumber],
  CampaignFundedEventObject
>;

export type CampaignFundedEventFilter = TypedEventFilter<CampaignFundedEvent>;

export interface RewardSentEventObject {
  participant: string;
  amount: BigNumber;
}
export type RewardSentEvent = TypedEvent<
  [string, BigNumber],
  RewardSentEventObject
>;

export type RewardSentEventFilter = TypedEventFilter<RewardSentEvent>;

export interface CashbackCampaign extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CashbackCampaignInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    end(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    endTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    ended(overrides?: CallOverrides): Promise<[boolean]>;

    fundCampaign(
      rewardPool: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getTokenBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    incrementRewardBalance(
      participant: PromiseOrValue<string>,
      reward: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isRunning(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    rewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    start(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    started(overrides?: CallOverrides): Promise<[boolean]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    voucherCollection(overrides?: CallOverrides): Promise<[string]>;

    withdrawReward(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  end(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  endTime(overrides?: CallOverrides): Promise<BigNumber>;

  ended(overrides?: CallOverrides): Promise<boolean>;

  fundCampaign(
    rewardPool: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

  incrementRewardBalance(
    participant: PromiseOrValue<string>,
    reward: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isRunning(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  rewards(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  start(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  started(overrides?: CallOverrides): Promise<boolean>;

  token(overrides?: CallOverrides): Promise<string>;

  voucherCollection(overrides?: CallOverrides): Promise<string>;

  withdrawReward(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    end(overrides?: CallOverrides): Promise<void>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    ended(overrides?: CallOverrides): Promise<boolean>;

    fundCampaign(
      rewardPool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    incrementRewardBalance(
      participant: PromiseOrValue<string>,
      reward: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isRunning(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    rewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    start(overrides?: CallOverrides): Promise<void>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    started(overrides?: CallOverrides): Promise<boolean>;

    token(overrides?: CallOverrides): Promise<string>;

    voucherCollection(overrides?: CallOverrides): Promise<string>;

    withdrawReward(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "CampaignCreated(address,address)"(
      custodian?: null,
      campaign?: null
    ): CampaignCreatedEventFilter;
    CampaignCreated(
      custodian?: null,
      campaign?: null
    ): CampaignCreatedEventFilter;

    "CampaignEnded(uint256)"(withdrawnTokens?: null): CampaignEndedEventFilter;
    CampaignEnded(withdrawnTokens?: null): CampaignEndedEventFilter;

    "CampaignFunded(uint256)"(
      depositedTokens?: null
    ): CampaignFundedEventFilter;
    CampaignFunded(depositedTokens?: null): CampaignFundedEventFilter;

    "RewardSent(address,uint256)"(
      participant?: null,
      amount?: null
    ): RewardSentEventFilter;
    RewardSent(participant?: null, amount?: null): RewardSentEventFilter;
  };

  estimateGas: {
    end(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    ended(overrides?: CallOverrides): Promise<BigNumber>;

    fundCampaign(
      rewardPool: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    incrementRewardBalance(
      participant: PromiseOrValue<string>,
      reward: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isRunning(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    rewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    start(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    started(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    voucherCollection(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawReward(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    end(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    endTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ended(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundCampaign(
      rewardPool: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getTokenBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    incrementRewardBalance(
      participant: PromiseOrValue<string>,
      reward: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isRunning(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    start(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    started(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voucherCollection(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawReward(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
